<?xml version="1.0" encoding="utf-8"?>
<topic id="7d29a9b9-c94f-4409-9949-a10c4cf5bf0c" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>We will demonstrate how to create <token>RefAtomForm</token> with 
      corresponding ViewModel class to support Binding and Cascaded <token>RefAtomComboBox</token> 
      to load dependent properties.
      </para>
      <para>
      Recently we identified few issues with MVVM implementation in Silverlight 
      regarding ComboBoxes. ComboBox looses its “SelectedValue” binding once the 
      ItemsSource of ComboBox changes. This needed some workaround as well as 
      Modifying DataForm is very painful as you may need very complex form designs 
      in regular business applications.</para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Lets Create a Simple Customer Editor which has Country and City drop downs.</title>
      <steps class="ordered">
        <step>
          <content>
            <para><legacyBold>Create Models</legacyBold></para>
            <para>Lets assume we need to edit a Customer’s Country and City, as 
            we change the Country the list of cities should change it. Problem 
            with existing ComboBox and DataForm is, as soon as list of cities 
            changes, ComboBox’s SelectedValue binding vanishes. So lets create 
            Customer Model first.</para>
            <mediaLinkInline><image xlink:href="MVVMViewModels"/></mediaLinkInline>
            <para>Each of properties in CustomerViewModel raises PropertyChanged 
            event for corresponding properties when modified</para>
            <para>When selected customer changes, SelectedCountry also changes 
            and which changes Cities property, so in drop down we can display 
            the list of cities of selected country.</para>
			
<alert class="note">
  <para>Your SelectedCountry property, where you need Change of Selection event 
  must not raise PropertyChanged event in “set” method as shown below…, however 
  you may turn it off or on based on your UI behavior. WPF has no problem but 
  Silverlight has issues and it works better if PropertyChanged event is not raised.
</para>

<code language="cs">
        public Country SelectedCountry
        {
            get
            {
                return _SelectedCountry;
            }
            set
            {
                _SelectedCountry = value;
                //if (PropertyChanged != null)
                //    PropertyChanged(this, new PropertyChangedEventArgs("SelectedCountry"));
                if (_SelectedCountry != null)
                {
                    Cities = _SelectedCountry.Cities;
                }
            }
        }
</code>

</alert>
            
          </content>
        </step>
        <step>
          <content>
            <para><legacyBold>Create Master View</legacyBold></para>
            <para>Master View control declares grid with two columns, left side 
            displaying list of customers and on right side displaying details 
            of the selected customer.</para>
            
<code language="xaml">
<![CDATA[
<UserControl x:Class="PrismTest.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ns="http://uiatoms.neurospeech.com/silverlight"
    xmlns:local="clr-namespace:PrismTest"
    mc:Ignorable="d"
    d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <local:ViewModelLocator x:Key="locator"/>
    </UserControl.Resources>
    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <ListBox 
            DisplayMemberPath="Name"
            x:Name="list"
            SelectedItem="{Binding ViewModel.SelectedCustomer,Source={StaticResource locator}, Mode=TwoWay}"
            ItemsSource="{Binding ViewModel.Customers,Source={StaticResource locator}}" />
        <local:CustomerView
            Grid.Column="1" />
    </Grid>
</UserControl>
]]>
</code>
		  <para>Let's analyze Bindings,
		  
<list class="bullet">
  <listItem>ListBox’s ItemsSource is bound to ViewModel.Customers which returns list of available customers.</listItem>
  <listItem>ListBox’s SelectedItem is bound (two way) to ViewModel.SelectedCustomer.</listItem>
</list>
</para>
          </content>
        </step>
        <step>
        	<content>
        		<para><legacyBold>Create Customer View Control with <token>RefAtomForm</token></legacyBold></para>

<code language="xaml">
<![CDATA[
<UserControl x:Class="PrismTest.CustomerView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ns="http://uiatoms.neurospeech.com/silverlight"
    xmlns:local="clr-namespace:PrismTest"
    mc:Ignorable="d"
    d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <local:ViewModelLocator x:Key="locator"/>
    </UserControl.Resources>
    <ns:AtomForm DataContext="{Binding ViewModel.SelectedCustomer,Source={StaticResource locator}}">
        <ns:AtomTextBox Text="{Binding Name, Mode=TwoWay}" 
                        ns:AtomForm.Label="Name:" />
        <ns:AtomComboBox ns:AtomForm.Label="Country:" 
                         SelectedValuePath="CountryID"
                         DisplayMemberPath="Name"
                         ItemsSource="{Binding ViewModel.Countries,Source={StaticResource locator}}"
                         SelectedItem="{Binding ViewModel.SelectedCountry,Source={StaticResource locator}, Mode=TwoWay}"
                         SelectedValue="{Binding CountryID, Mode=TwoWay}"
                         />
        <ns:AtomComboBox ns:AtomForm.Label="City:"                          
                         SelectedValuePath="CityID"
                         DisplayMemberPath="Name"
                         ItemsSource="{Binding ViewModel.Cities,Source={StaticResource locator}}"
                         SelectedValue="{Binding CityID, Mode=TwoWay}"
                         />
    </ns:AtomForm>    
</UserControl>
]]>
</code>
        		
        		<para>Let's analyze the bindings,
        		
<list class="bullet">
  <listItem>AtomForm’s DataContext is bound to SelectedCustomer of ViewModel, 
  which comes from SelectedItem of Parent Control </listItem>
  <listItem>AtomTextBox’s  Text is bound to Name (of AtomForm’s DataContext’s 
  binding) with Mode=TwoWay </listItem>
  <listItem>
  AtomComboBox 
  
<list class="bullet">
  <listItem>ItemsSource is bound to ViewModel.Countries which returns list of countries.</listItem>
  <listItem>SelectedValue is bound to CountryID (of AtomForm’s DataContext’s binding) with Mode=TwoWay</listItem>
  <listItem>SelectedItem is bound to ViewModel.SelectedCountry, which triggers change of SelectedCountry property on ViewModel which changes list of cities.</listItem>
</list>

  </listItem>
  <listItem>
  AtomComboBox (this is the one that’s tricky, normal ComboBox does not work here) 
  
<list class="bullet">
  <listItem>ItemsSource is bound to ViewModel.Cities which returns list of cities of SelectedCountry.</listItem>
  <listItem>SelectedValue is bound to CityID (of AtomForm’s DataContext’s binding) with Mode=TwoWay.</listItem>
</list>

  </listItem>
</list>
</para>
        	</content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- Optional additional procedure or section with procedure -->
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>