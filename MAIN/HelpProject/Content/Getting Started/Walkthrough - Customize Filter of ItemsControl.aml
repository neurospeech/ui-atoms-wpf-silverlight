<?xml version="1.0" encoding="utf-8"?>
<topic id="214a6fe5-c9d6-4fa2-869f-4eca4e7643af" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para><token>RefAtomFilterTextBox</token> class provides filter mechanism to filter associated ItemsControl class, which is 
      helpful while narrowing down the search result in ItemsControl class such as <token>RefAtomComboBox</token> and <token>RefAtomListBox</token>. Both
      these classes have <token>RefAtomFilterTextBox</token> inbuilt in the templates to do the filtering however this article outlines 
      customization of filtering mechanism as well as using <token>RefAtomFilterTextBox</token> to filter other ItemsControl based controls.</para>
    </introduction>
    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->
    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Customizing Filter</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Lets assume you have following list of Countries to filter. With
            following schema.
			<code language="cs">
			public class AtomCountryItem{
			
				public string CountryName;
				
				public string CountryCode;
				
			}
			</code>

            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Lets create a View Model that will return the list of countries
            and a filter provider</para>
            
			<code language="cs">
			    public class CountryViewModel {
			
			
			        // load countries
			        public AtomCountryItem[] Countries {
			            get {
			                return AtomCountryComboBox.LoadCountries(null).ToArray();
			            }
			        }
			
			        // provide filter...
			        public IAtomItemsFilter FilterProvider{
			            get {
			                return new CountryFilter();
			            }
			        }
			    }
			</code>

          </content>
        </step>
        <step>
        	<content>
        		<para>Lets create a CountryFilter that will implement IAtomItemsFilter.
        		
				<code language="cs">
				    public class CountryFilter : IAtomItemsFilter
				    {
				
				        public bool FilterItem(
				            object itemsControl, 
				            object item, 
				            string filterText, 
				            AtomTextFilterMode mode, 
				            StringComparison comparison)
				        {
				            AtomCountryItem country = item as AtomCountryItem;
				
							// here is the place where you can customize
							// the filter logic
				            if (country.CountryName.ToLower().StartsWith(filterText.ToLower()))
				                return true;
				
				            return false;
				        }
				
				    }
				
				</code>

        		</para>
        	</content>
        </step>
        <step>
	        <content>
		        <para>Lets bind ViewModel to <token>RefAtomListBox</token> in a Page.
		        
<code language="xaml">
<![CDATA[
<navigation:Page x:Class="UIAtomsDemo.Views.ListSamples.CustomizedFilter" 
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:ns="http://uiatoms.neurospeech.com/silverlight"
                 xmlns:local="clr-namespace:UIAtomsDemo.Views.ListSamples"
           mc:Ignorable="d"
           xmlns:navigation="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Navigation"
           d:DesignWidth="640" d:DesignHeight="480"
           Title="CustomizedFilter Page">
    <navigation:Page.Resources>
        <local:CountryViewModel x:Key="viewModel"/>
    </navigation:Page.Resources>
    <Grid x:Name="LayoutRoot">
            <ns:AtomListBox
                ns:AtomForm.Label="Countries:"
                DisplayMemberPath="CountryName"
                ItemsSource="{Binding Countries,Source={StaticResource viewModel}}"
                FilterProvider="{Binding Source={StaticResource viewModel}, Path=FilterProvider}"
                FilterMode="Custom"
                IsFilterVisible="True"
                Height="400">
                <ns:AtomListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel/>
                    </ItemsPanelTemplate>
                </ns:AtomListBox.ItemsPanel>
            </ns:AtomListBox>            
    </Grid>
</navigation:Page>

]]>
</code>
				Now lets review the bindings of <token>RefAtomListBox</token>.
				
<list class="bullet">
  <listItem>ItemsSource is bound to Countries property of View Model.</listItem>
  <listItem>FilterProvider is bound to FilterProvider property of View Model, which implements IAtomItemsFilter interface.</listItem>
</list>

		        </para>
	        </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- Optional additional procedure or section with procedure -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <procedure>
          <title>Procedure #2</title>
          <steps class="ordered">
            <step>
              <content>
                <para>First step</para>
              </content>
            </step>
            <step>
              <content>
                <para>Second step</para>
              </content>
            </step>
          </steps>
          <!-- <conclusion>Optional conclusion</conclusion> -->
        </procedure>
      </content>
    </section>
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>