//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NeuroSpeech.UIAtoms.Designers.WebLicense {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebLicense.LicenseServiceSoap")]
    public interface LicenseServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestTrialLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString RequestTrialLicense(string emailAddress, string editionUID, bool subscribe);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RequestTrialLicense", ReplyAction="*")]
        System.IAsyncResult BeginRequestTrialLicense(string emailAddress, string editionUID, bool subscribe, System.AsyncCallback callback, object asyncState);
        
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndRequestTrialLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString GetLicense(string emailAddress, string editionUID, string licenseCode, string computerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetLicense", ReplyAction="*")]
        System.IAsyncResult BeginGetLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState);
        
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndGetLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActivateLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString ActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ActivateLicense", ReplyAction="*")]
        System.IAsyncResult BeginActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState);
        
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndActivateLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeactivateLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString DeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DeactivateLicense", ReplyAction="*")]
        System.IAsyncResult BeginDeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState);
        
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndDeactivateLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Subscribe", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Subscribe(string emailAddress, string editionUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Subscribe", ReplyAction="*")]
        System.IAsyncResult BeginSubscribe(string emailAddress, string editionUID, System.AsyncCallback callback, object asyncState);
        
        NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndSubscribe(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class WSResultOfString : GenericResult {
        
        private string resultField;
        
        private string[] resultsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public string[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
                this.RaisePropertyChanged("Results");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WSResultOfString))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class GenericResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long totalField;
        
        private bool successfulField;
        
        private string messageField;
        
        private string messageDetailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
                this.RaisePropertyChanged("Total");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Successful {
            get {
                return this.successfulField;
            }
            set {
                this.successfulField = value;
                this.RaisePropertyChanged("Successful");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string MessageDetails {
            get {
                return this.messageDetailsField;
            }
            set {
                this.messageDetailsField = value;
                this.RaisePropertyChanged("MessageDetails");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LicenseServiceSoapChannel : NeuroSpeech.UIAtoms.Designers.WebLicense.LicenseServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestTrialLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestTrialLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ActivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeactivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeactivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceSoapClient : System.ServiceModel.ClientBase<NeuroSpeech.UIAtoms.Designers.WebLicense.LicenseServiceSoap>, NeuroSpeech.UIAtoms.Designers.WebLicense.LicenseServiceSoap {
        
        private BeginOperationDelegate onBeginRequestTrialLicenseDelegate;
        
        private EndOperationDelegate onEndRequestTrialLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onRequestTrialLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLicenseDelegate;
        
        private EndOperationDelegate onEndGetLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onGetLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginActivateLicenseDelegate;
        
        private EndOperationDelegate onEndActivateLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onActivateLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeactivateLicenseDelegate;
        
        private EndOperationDelegate onEndDeactivateLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onDeactivateLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        public LicenseServiceSoapClient() {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<RequestTrialLicenseCompletedEventArgs> RequestTrialLicenseCompleted;
        
        public event System.EventHandler<GetLicenseCompletedEventArgs> GetLicenseCompleted;
        
        public event System.EventHandler<ActivateLicenseCompletedEventArgs> ActivateLicenseCompleted;
        
        public event System.EventHandler<DeactivateLicenseCompletedEventArgs> DeactivateLicenseCompleted;
        
        public event System.EventHandler<SubscribeCompletedEventArgs> SubscribeCompleted;
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString RequestTrialLicense(string emailAddress, string editionUID, bool subscribe) {
            return base.Channel.RequestTrialLicense(emailAddress, editionUID, subscribe);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequestTrialLicense(string emailAddress, string editionUID, bool subscribe, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestTrialLicense(emailAddress, editionUID, subscribe, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndRequestTrialLicense(System.IAsyncResult result) {
            return base.Channel.EndRequestTrialLicense(result);
        }
        
        private System.IAsyncResult OnBeginRequestTrialLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            bool subscribe = ((bool)(inValues[2]));
            return this.BeginRequestTrialLicense(emailAddress, editionUID, subscribe, callback, asyncState);
        }
        
        private object[] OnEndRequestTrialLicense(System.IAsyncResult result) {
            NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString retVal = this.EndRequestTrialLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestTrialLicenseCompleted(object state) {
            if ((this.RequestTrialLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestTrialLicenseCompleted(this, new RequestTrialLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestTrialLicenseAsync(string emailAddress, string editionUID, bool subscribe) {
            this.RequestTrialLicenseAsync(emailAddress, editionUID, subscribe, null);
        }
        
        public void RequestTrialLicenseAsync(string emailAddress, string editionUID, bool subscribe, object userState) {
            if ((this.onBeginRequestTrialLicenseDelegate == null)) {
                this.onBeginRequestTrialLicenseDelegate = new BeginOperationDelegate(this.OnBeginRequestTrialLicense);
            }
            if ((this.onEndRequestTrialLicenseDelegate == null)) {
                this.onEndRequestTrialLicenseDelegate = new EndOperationDelegate(this.OnEndRequestTrialLicense);
            }
            if ((this.onRequestTrialLicenseCompletedDelegate == null)) {
                this.onRequestTrialLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestTrialLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginRequestTrialLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        subscribe}, this.onEndRequestTrialLicenseDelegate, this.onRequestTrialLicenseCompletedDelegate, userState);
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString GetLicense(string emailAddress, string editionUID, string licenseCode, string computerName) {
            return base.Channel.GetLicense(emailAddress, editionUID, licenseCode, computerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndGetLicense(System.IAsyncResult result) {
            return base.Channel.EndGetLicense(result);
        }
        
        private System.IAsyncResult OnBeginGetLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            string licenseCode = ((string)(inValues[2]));
            string computerName = ((string)(inValues[3]));
            return this.BeginGetLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        private object[] OnEndGetLicense(System.IAsyncResult result) {
            NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString retVal = this.EndGetLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLicenseCompleted(object state) {
            if ((this.GetLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLicenseCompleted(this, new GetLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName) {
            this.GetLicenseAsync(emailAddress, editionUID, licenseCode, computerName, null);
        }
        
        public void GetLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName, object userState) {
            if ((this.onBeginGetLicenseDelegate == null)) {
                this.onBeginGetLicenseDelegate = new BeginOperationDelegate(this.OnBeginGetLicense);
            }
            if ((this.onEndGetLicenseDelegate == null)) {
                this.onEndGetLicenseDelegate = new EndOperationDelegate(this.OnEndGetLicense);
            }
            if ((this.onGetLicenseCompletedDelegate == null)) {
                this.onGetLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginGetLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        licenseCode,
                        computerName}, this.onEndGetLicenseDelegate, this.onGetLicenseCompletedDelegate, userState);
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString ActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName) {
            return base.Channel.ActivateLicense(emailAddress, editionUID, licenseCode, computerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndActivateLicense(System.IAsyncResult result) {
            return base.Channel.EndActivateLicense(result);
        }
        
        private System.IAsyncResult OnBeginActivateLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            string licenseCode = ((string)(inValues[2]));
            string computerName = ((string)(inValues[3]));
            return this.BeginActivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        private object[] OnEndActivateLicense(System.IAsyncResult result) {
            NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString retVal = this.EndActivateLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnActivateLicenseCompleted(object state) {
            if ((this.ActivateLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActivateLicenseCompleted(this, new ActivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName) {
            this.ActivateLicenseAsync(emailAddress, editionUID, licenseCode, computerName, null);
        }
        
        public void ActivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName, object userState) {
            if ((this.onBeginActivateLicenseDelegate == null)) {
                this.onBeginActivateLicenseDelegate = new BeginOperationDelegate(this.OnBeginActivateLicense);
            }
            if ((this.onEndActivateLicenseDelegate == null)) {
                this.onEndActivateLicenseDelegate = new EndOperationDelegate(this.OnEndActivateLicense);
            }
            if ((this.onActivateLicenseCompletedDelegate == null)) {
                this.onActivateLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActivateLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginActivateLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        licenseCode,
                        computerName}, this.onEndActivateLicenseDelegate, this.onActivateLicenseCompletedDelegate, userState);
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString DeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName) {
            return base.Channel.DeactivateLicense(emailAddress, editionUID, licenseCode, computerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeactivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndDeactivateLicense(System.IAsyncResult result) {
            return base.Channel.EndDeactivateLicense(result);
        }
        
        private System.IAsyncResult OnBeginDeactivateLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            string licenseCode = ((string)(inValues[2]));
            string computerName = ((string)(inValues[3]));
            return this.BeginDeactivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        private object[] OnEndDeactivateLicense(System.IAsyncResult result) {
            NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString retVal = this.EndDeactivateLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeactivateLicenseCompleted(object state) {
            if ((this.DeactivateLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeactivateLicenseCompleted(this, new DeactivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeactivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName) {
            this.DeactivateLicenseAsync(emailAddress, editionUID, licenseCode, computerName, null);
        }
        
        public void DeactivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName, object userState) {
            if ((this.onBeginDeactivateLicenseDelegate == null)) {
                this.onBeginDeactivateLicenseDelegate = new BeginOperationDelegate(this.OnBeginDeactivateLicense);
            }
            if ((this.onEndDeactivateLicenseDelegate == null)) {
                this.onEndDeactivateLicenseDelegate = new EndOperationDelegate(this.OnEndDeactivateLicense);
            }
            if ((this.onDeactivateLicenseCompletedDelegate == null)) {
                this.onDeactivateLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeactivateLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginDeactivateLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        licenseCode,
                        computerName}, this.onEndDeactivateLicenseDelegate, this.onDeactivateLicenseCompletedDelegate, userState);
        }
        
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString Subscribe(string emailAddress, string editionUID) {
            return base.Channel.Subscribe(emailAddress, editionUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscribe(string emailAddress, string editionUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(emailAddress, editionUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString EndSubscribe(System.IAsyncResult result) {
            return base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            return this.BeginSubscribe(emailAddress, editionUID, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            NeuroSpeech.UIAtoms.Designers.WebLicense.WSResultOfString retVal = this.EndSubscribe(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(string emailAddress, string editionUID) {
            this.SubscribeAsync(emailAddress, editionUID, null);
        }
        
        public void SubscribeAsync(string emailAddress, string editionUID, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        emailAddress,
                        editionUID}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
    }
}
