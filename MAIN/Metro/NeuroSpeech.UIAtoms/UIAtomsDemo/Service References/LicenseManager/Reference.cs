//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace UIAtomsDemo.LicenseManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LicenseManager.LicenseServiceSoap")]
    public interface LicenseServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RequestTrialLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        System.IAsyncResult BeginRequestTrialLicense(string emailAddress, string editionUID, bool subscribe, System.AsyncCallback callback, object asyncState);
        
        UIAtomsDemo.LicenseManager.WSResultOfString EndRequestTrialLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ActivateLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        System.IAsyncResult BeginActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState);
        
        UIAtomsDemo.LicenseManager.WSResultOfString EndActivateLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DeactivateLicense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        System.IAsyncResult BeginDeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState);
        
        UIAtomsDemo.LicenseManager.WSResultOfString EndDeactivateLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Subscribe", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        System.IAsyncResult BeginSubscribe(string emailAddress, string editionUID, System.AsyncCallback callback, object asyncState);
        
        UIAtomsDemo.LicenseManager.WSResultOfString EndSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenericResult))]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        void EndPing(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class WSResultOfString : GenericResult {
        
        private string resultField;
        
        private string[] resultsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public string[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
                this.RaisePropertyChanged("Results");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WSResultOfString))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class GenericResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long totalField;
        
        private bool successfulField;
        
        private string messageField;
        
        private string messageDetailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
                this.RaisePropertyChanged("Total");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Successful {
            get {
                return this.successfulField;
            }
            set {
                this.successfulField = value;
                this.RaisePropertyChanged("Successful");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string MessageDetails {
            get {
                return this.messageDetailsField;
            }
            set {
                this.messageDetailsField = value;
                this.RaisePropertyChanged("MessageDetails");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LicenseServiceSoapChannel : UIAtomsDemo.LicenseManager.LicenseServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestTrialLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RequestTrialLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public UIAtomsDemo.LicenseManager.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((UIAtomsDemo.LicenseManager.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ActivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public UIAtomsDemo.LicenseManager.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((UIAtomsDemo.LicenseManager.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeactivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeactivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public UIAtomsDemo.LicenseManager.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((UIAtomsDemo.LicenseManager.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public UIAtomsDemo.LicenseManager.WSResultOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((UIAtomsDemo.LicenseManager.WSResultOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceSoapClient : System.ServiceModel.ClientBase<UIAtomsDemo.LicenseManager.LicenseServiceSoap>, UIAtomsDemo.LicenseManager.LicenseServiceSoap {
        
        private BeginOperationDelegate onBeginRequestTrialLicenseDelegate;
        
        private EndOperationDelegate onEndRequestTrialLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onRequestTrialLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginActivateLicenseDelegate;
        
        private EndOperationDelegate onEndActivateLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onActivateLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeactivateLicenseDelegate;
        
        private EndOperationDelegate onEndDeactivateLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onDeactivateLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LicenseServiceSoapClient() {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RequestTrialLicenseCompletedEventArgs> RequestTrialLicenseCompleted;
        
        public event System.EventHandler<ActivateLicenseCompletedEventArgs> ActivateLicenseCompleted;
        
        public event System.EventHandler<DeactivateLicenseCompletedEventArgs> DeactivateLicenseCompleted;
        
        public event System.EventHandler<SubscribeCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UIAtomsDemo.LicenseManager.LicenseServiceSoap.BeginRequestTrialLicense(string emailAddress, string editionUID, bool subscribe, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequestTrialLicense(emailAddress, editionUID, subscribe, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UIAtomsDemo.LicenseManager.WSResultOfString UIAtomsDemo.LicenseManager.LicenseServiceSoap.EndRequestTrialLicense(System.IAsyncResult result) {
            return base.Channel.EndRequestTrialLicense(result);
        }
        
        private System.IAsyncResult OnBeginRequestTrialLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            bool subscribe = ((bool)(inValues[2]));
            return ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).BeginRequestTrialLicense(emailAddress, editionUID, subscribe, callback, asyncState);
        }
        
        private object[] OnEndRequestTrialLicense(System.IAsyncResult result) {
            UIAtomsDemo.LicenseManager.WSResultOfString retVal = ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).EndRequestTrialLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequestTrialLicenseCompleted(object state) {
            if ((this.RequestTrialLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RequestTrialLicenseCompleted(this, new RequestTrialLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RequestTrialLicenseAsync(string emailAddress, string editionUID, bool subscribe) {
            this.RequestTrialLicenseAsync(emailAddress, editionUID, subscribe, null);
        }
        
        public void RequestTrialLicenseAsync(string emailAddress, string editionUID, bool subscribe, object userState) {
            if ((this.onBeginRequestTrialLicenseDelegate == null)) {
                this.onBeginRequestTrialLicenseDelegate = new BeginOperationDelegate(this.OnBeginRequestTrialLicense);
            }
            if ((this.onEndRequestTrialLicenseDelegate == null)) {
                this.onEndRequestTrialLicenseDelegate = new EndOperationDelegate(this.OnEndRequestTrialLicense);
            }
            if ((this.onRequestTrialLicenseCompletedDelegate == null)) {
                this.onRequestTrialLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequestTrialLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginRequestTrialLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        subscribe}, this.onEndRequestTrialLicenseDelegate, this.onRequestTrialLicenseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UIAtomsDemo.LicenseManager.LicenseServiceSoap.BeginActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UIAtomsDemo.LicenseManager.WSResultOfString UIAtomsDemo.LicenseManager.LicenseServiceSoap.EndActivateLicense(System.IAsyncResult result) {
            return base.Channel.EndActivateLicense(result);
        }
        
        private System.IAsyncResult OnBeginActivateLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            string licenseCode = ((string)(inValues[2]));
            string computerName = ((string)(inValues[3]));
            return ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).BeginActivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        private object[] OnEndActivateLicense(System.IAsyncResult result) {
            UIAtomsDemo.LicenseManager.WSResultOfString retVal = ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).EndActivateLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnActivateLicenseCompleted(object state) {
            if ((this.ActivateLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActivateLicenseCompleted(this, new ActivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName) {
            this.ActivateLicenseAsync(emailAddress, editionUID, licenseCode, computerName, null);
        }
        
        public void ActivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName, object userState) {
            if ((this.onBeginActivateLicenseDelegate == null)) {
                this.onBeginActivateLicenseDelegate = new BeginOperationDelegate(this.OnBeginActivateLicense);
            }
            if ((this.onEndActivateLicenseDelegate == null)) {
                this.onEndActivateLicenseDelegate = new EndOperationDelegate(this.OnEndActivateLicense);
            }
            if ((this.onActivateLicenseCompletedDelegate == null)) {
                this.onActivateLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActivateLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginActivateLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        licenseCode,
                        computerName}, this.onEndActivateLicenseDelegate, this.onActivateLicenseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UIAtomsDemo.LicenseManager.LicenseServiceSoap.BeginDeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeactivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UIAtomsDemo.LicenseManager.WSResultOfString UIAtomsDemo.LicenseManager.LicenseServiceSoap.EndDeactivateLicense(System.IAsyncResult result) {
            return base.Channel.EndDeactivateLicense(result);
        }
        
        private System.IAsyncResult OnBeginDeactivateLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            string licenseCode = ((string)(inValues[2]));
            string computerName = ((string)(inValues[3]));
            return ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).BeginDeactivateLicense(emailAddress, editionUID, licenseCode, computerName, callback, asyncState);
        }
        
        private object[] OnEndDeactivateLicense(System.IAsyncResult result) {
            UIAtomsDemo.LicenseManager.WSResultOfString retVal = ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).EndDeactivateLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeactivateLicenseCompleted(object state) {
            if ((this.DeactivateLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeactivateLicenseCompleted(this, new DeactivateLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeactivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName) {
            this.DeactivateLicenseAsync(emailAddress, editionUID, licenseCode, computerName, null);
        }
        
        public void DeactivateLicenseAsync(string emailAddress, string editionUID, string licenseCode, string computerName, object userState) {
            if ((this.onBeginDeactivateLicenseDelegate == null)) {
                this.onBeginDeactivateLicenseDelegate = new BeginOperationDelegate(this.OnBeginDeactivateLicense);
            }
            if ((this.onEndDeactivateLicenseDelegate == null)) {
                this.onEndDeactivateLicenseDelegate = new EndOperationDelegate(this.OnEndDeactivateLicense);
            }
            if ((this.onDeactivateLicenseCompletedDelegate == null)) {
                this.onDeactivateLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeactivateLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginDeactivateLicenseDelegate, new object[] {
                        emailAddress,
                        editionUID,
                        licenseCode,
                        computerName}, this.onEndDeactivateLicenseDelegate, this.onDeactivateLicenseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UIAtomsDemo.LicenseManager.LicenseServiceSoap.BeginSubscribe(string emailAddress, string editionUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(emailAddress, editionUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UIAtomsDemo.LicenseManager.WSResultOfString UIAtomsDemo.LicenseManager.LicenseServiceSoap.EndSubscribe(System.IAsyncResult result) {
            return base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailAddress = ((string)(inValues[0]));
            string editionUID = ((string)(inValues[1]));
            return ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).BeginSubscribe(emailAddress, editionUID, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            UIAtomsDemo.LicenseManager.WSResultOfString retVal = ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).EndSubscribe(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(string emailAddress, string editionUID) {
            this.SubscribeAsync(emailAddress, editionUID, null);
        }
        
        public void SubscribeAsync(string emailAddress, string editionUID, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        emailAddress,
                        editionUID}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UIAtomsDemo.LicenseManager.LicenseServiceSoap.BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void UIAtomsDemo.LicenseManager.LicenseServiceSoap.EndPing(System.IAsyncResult result) {
            base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            ((UIAtomsDemo.LicenseManager.LicenseServiceSoap)(this)).EndPing(result);
            return null;
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override UIAtomsDemo.LicenseManager.LicenseServiceSoap CreateChannel() {
            return new LicenseServiceSoapClientChannel(this);
        }
        
        private class LicenseServiceSoapClientChannel : ChannelBase<UIAtomsDemo.LicenseManager.LicenseServiceSoap>, UIAtomsDemo.LicenseManager.LicenseServiceSoap {
            
            public LicenseServiceSoapClientChannel(System.ServiceModel.ClientBase<UIAtomsDemo.LicenseManager.LicenseServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRequestTrialLicense(string emailAddress, string editionUID, bool subscribe, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = emailAddress;
                _args[1] = editionUID;
                _args[2] = subscribe;
                System.IAsyncResult _result = base.BeginInvoke("RequestTrialLicense", _args, callback, asyncState);
                return _result;
            }
            
            public UIAtomsDemo.LicenseManager.WSResultOfString EndRequestTrialLicense(System.IAsyncResult result) {
                object[] _args = new object[0];
                UIAtomsDemo.LicenseManager.WSResultOfString _result = ((UIAtomsDemo.LicenseManager.WSResultOfString)(base.EndInvoke("RequestTrialLicense", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginActivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = emailAddress;
                _args[1] = editionUID;
                _args[2] = licenseCode;
                _args[3] = computerName;
                System.IAsyncResult _result = base.BeginInvoke("ActivateLicense", _args, callback, asyncState);
                return _result;
            }
            
            public UIAtomsDemo.LicenseManager.WSResultOfString EndActivateLicense(System.IAsyncResult result) {
                object[] _args = new object[0];
                UIAtomsDemo.LicenseManager.WSResultOfString _result = ((UIAtomsDemo.LicenseManager.WSResultOfString)(base.EndInvoke("ActivateLicense", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeactivateLicense(string emailAddress, string editionUID, string licenseCode, string computerName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = emailAddress;
                _args[1] = editionUID;
                _args[2] = licenseCode;
                _args[3] = computerName;
                System.IAsyncResult _result = base.BeginInvoke("DeactivateLicense", _args, callback, asyncState);
                return _result;
            }
            
            public UIAtomsDemo.LicenseManager.WSResultOfString EndDeactivateLicense(System.IAsyncResult result) {
                object[] _args = new object[0];
                UIAtomsDemo.LicenseManager.WSResultOfString _result = ((UIAtomsDemo.LicenseManager.WSResultOfString)(base.EndInvoke("DeactivateLicense", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribe(string emailAddress, string editionUID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = emailAddress;
                _args[1] = editionUID;
                System.IAsyncResult _result = base.BeginInvoke("Subscribe", _args, callback, asyncState);
                return _result;
            }
            
            public UIAtomsDemo.LicenseManager.WSResultOfString EndSubscribe(System.IAsyncResult result) {
                object[] _args = new object[0];
                UIAtomsDemo.LicenseManager.WSResultOfString _result = ((UIAtomsDemo.LicenseManager.WSResultOfString)(base.EndInvoke("Subscribe", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Ping", _args, result);
            }
        }
    }
}
